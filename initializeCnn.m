function net = initializeCnn()

net.meta.inputSize = [64 64 3 10] ;

net.layers = {} ;

net.layers{end+1} = struct(...
  'name', 'conv1_1', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,3,64)}, ...
  'pad', 1, ...
  'learningRate', [2 1], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu1_1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv1_2', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,64,64)}, ...
  'pad', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu1_2', ...
  'type', 'relu') ;

%net.layers{end+1} = struct(...
%  'name', 'pool1', ...
%  'type', 'pool', ...
%  'method', 'max', ...
%  'pool', [2 2], ...
%  'stride', [2 2], ...
%  'pad', [0 1 0 1]) ;

net.layers{end+1} = struct(...
  'name', 'conv2_1', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,64,128)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu2_1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv2_2', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,128,128)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu2_2', ...
  'type', 'relu') ;

%net.layers{end+1} = struct(...
%  'name', 'pool2', ...
%  'type', 'pool', ...
%  'method', 'max', ...
%  'pool', [2 2], ...
%  'stride', [2 2], ...
%  'pad', [0 1 0 1]) ;

net.layers{end+1} = struct(...
  'name', 'conv3_1', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,128,256)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu3_1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv3_2', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,256,256)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu3_2', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv3_3', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,256,256)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu3_3', ...
  'type', 'relu') ;

%net.layers{end+1} = struct(...
%  'name', 'pool3', ...
%  'type', 'pool', ...
%  'method', 'max', ...
%  'pool', [2 2], ...
%  'stride', [2 2], ...
%  'pad', [0 1 0 1]) ;

net.layers{end+1} = struct(...
  'name', 'conv4_1', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,256,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu4_1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv4_2', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu4_2', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv4_3', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu4_3', ...
  'type', 'relu') ;

%net.layers{end+1} = struct(...
%  'name', 'pool4', ...
%  'type', 'pool', ...
%  'method', 'max', ...
%  'pool', [2 2], ...
%  'stride', [2 2], ...
%  'pad', [0 1 0 1]) ;

net.layers{end+1} = struct(...
  'name', 'conv5_1', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu5_1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv5_2', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu5_2', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'conv5_3', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,512)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu5_3', ...
  'type', 'relu') ;

%net.layers{end+1} = struct(...
%  'name', 'pool5', ...
%  'type', 'pool', ...
%  'method', 'max', ...
%  'pool', [2 2], ...
%  'stride', [2 2], ...
%  'pad', [0 1 0 1]) ;

net.layers{end+1} = struct(...
  'name', 'fc6', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,512,4096)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu6', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'drop6', ...
  'type', 'dropout', ...
  'rate', 0.5) ;

net.layers{end+1} = struct(...
  'name', 'fc7', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,4096,4096)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu7', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
  'name', 'drop7', ...
  'type', 'dropout', ...
  'rate', 0.5) ;

net.layers{end+1} = struct(...
  'name', 'fc8', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,4096,200)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 2], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'prob', ...
  'type', 'softmax') ;

net = vl_simplenn_tidy(net) ;
